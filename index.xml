<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Why The Platypus Codes</title>
    <link>https://why.theplatypus.codes/</link>
    <description>Recent content on Why The Platypus Codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Feb 2020 14:58:43 -0500</lastBuildDate>
    
	<atom:link href="https://why.theplatypus.codes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reachable States</title>
      <link>https://why.theplatypus.codes/quotes/reachable-states/</link>
      <pubDate>Fri, 03 Apr 2020 08:28:49 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/reachable-states/</guid>
      <description> In order to assist the checker, the programmer should make assertions about the various states that the machine can reach.
 </description>
    </item>
    
    <item>
      <title>Definite Assertions</title>
      <link>https://why.theplatypus.codes/quotes/definite-assertions/</link>
      <pubDate>Fri, 03 Apr 2020 08:28:21 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/definite-assertions/</guid>
      <description> the programmer should make a number of definite assertions which can be checked individually, and from which the correctness of the whole programme easily follows.
 </description>
    </item>
    
    <item>
      <title>Price of Reliability</title>
      <link>https://why.theplatypus.codes/quotes/price-of-reliability/</link>
      <pubDate>Mon, 23 Mar 2020 15:44:29 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/price-of-reliability/</guid>
      <description> The price of reliability is the pursuit of the utmost simplicity. It is a price which the very rich find most hard to pay.
 </description>
    </item>
    
    <item>
      <title>Language Complexity</title>
      <link>https://why.theplatypus.codes/quotes/language-complexity/</link>
      <pubDate>Mon, 23 Mar 2020 15:42:08 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/language-complexity/</guid>
      <description> If our basic tool, the language in which we design and code our programs, is also complicated, the language itself becomes part of the problem rather than part of its solution.
 </description>
    </item>
    
    <item>
      <title>Added Later</title>
      <link>https://why.theplatypus.codes/quotes/added-later/</link>
      <pubDate>Mon, 23 Mar 2020 15:36:28 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/added-later/</guid>
      <description> A feature which is omitted can always be added later, when its design and its implications are well understood. A feature which is included before it is fully understood can never be removed later.
 </description>
    </item>
    
    <item>
      <title>Two Ways</title>
      <link>https://why.theplatypus.codes/quotes/two-ways/</link>
      <pubDate>Mon, 23 Mar 2020 15:21:48 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/two-ways/</guid>
      <description> I conclude that there are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies.
 </description>
    </item>
    
    <item>
      <title>Subset Improvement</title>
      <link>https://why.theplatypus.codes/quotes/subset-improvement/</link>
      <pubDate>Mon, 23 Mar 2020 15:17:23 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/subset-improvement/</guid>
      <description> we recognized that a subset could be an improvement on the original.
 </description>
    </item>
    
    <item>
      <title>Read by People</title>
      <link>https://why.theplatypus.codes/quotes/read-by-people/</link>
      <pubDate>Mon, 23 Mar 2020 15:14:41 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/read-by-people/</guid>
      <description> First, we certainly want programs to be read by people and people prefer to read things once in a single pass.
 </description>
    </item>
    
    <item>
      <title>Against the Law</title>
      <link>https://why.theplatypus.codes/quotes/against-the-law/</link>
      <pubDate>Mon, 23 Mar 2020 15:04:51 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/against-the-law/</guid>
      <description> In any respectable branch of engineering, failure to observe such elementary precautions would have long been against the law.
 </description>
    </item>
    
    <item>
      <title>Switchboard</title>
      <link>https://why.theplatypus.codes/switchboard/</link>
      <pubDate>Mon, 17 Feb 2020 14:58:43 -0500</pubDate>
      
      <guid>https://why.theplatypus.codes/switchboard/</guid>
      <description>The problem Sometimes I build little things that have a web componant. It might be a webiste or an API, the usual suspects. As much as it scares me sometimes I also think that these things should run for real and be treated as real, if small, products in order to take them serisiously myself. The final piece to the puzzle is my own laziness. The cloud is a fine place to host things.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://why.theplatypus.codes/quotes/conjure-the-spirits/</link>
      <pubDate>Tue, 07 May 2019 10:30:00 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/conjure-the-spirits/</guid>
      <description> In effect, we conjure the spirits of the computer with our spells. (p. 1) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://why.theplatypus.codes/quotes/how-to/</link>
      <pubDate>Tue, 07 May 2019 10:30:00 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/how-to/</guid>
      <description> Computation provides a framework for dealing precisely with notions of &amp;ldquo;how to&amp;rdquo;. (p. xvi) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://why.theplatypus.codes/quotes/in-order-to-use-it/</link>
      <pubDate>Tue, 07 May 2019 10:30:00 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/in-order-to-use-it/</guid>
      <description> The user should not need to know how the procedure is implemented in order to use it. (p. 25) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://why.theplatypus.codes/quotes/incidentally-for-machines/</link>
      <pubDate>Tue, 07 May 2019 10:30:00 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/incidentally-for-machines/</guid>
      <description> Thus, programs must be written for people to read, and only incidentally for machines to execute. (p. xv) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://why.theplatypus.codes/quotes/not-a-science/</link>
      <pubDate>Tue, 07 May 2019 10:30:00 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/not-a-science/</guid>
      <description> &amp;ldquo;computer science&amp;rdquo; is not a science and that its significance has little to do with computers. (p. xvi) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://why.theplatypus.codes/quotes/read-and-write/</link>
      <pubDate>Tue, 07 May 2019 10:30:00 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/read-and-write/</guid>
      <description> you must read and write computer programs&amp;mdash;many of them. It doesn&amp;rsquo;t matter much what the programs are about or what applications they serve. (p. xi) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://why.theplatypus.codes/quotes/spirit-and-style/</link>
      <pubDate>Tue, 07 May 2019 10:30:00 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/spirit-and-style/</guid>
      <description> They should feel secure about modifying a program, retaining the spirit and style of the original author. (p. xvi) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://why.theplatypus.codes/quotes/visualize-the-behavior/</link>
      <pubDate>Tue, 07 May 2019 10:30:00 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/quotes/visualize-the-behavior/</guid>
      <description> [A master software engineer] can visualize the behavior of his system in advance. (p. 2) </description>
    </item>
    
    <item>
      <title>Elixir Protocols and Behaviors</title>
      <link>https://why.theplatypus.codes/note/elixir-protocols-and-behaviors/</link>
      <pubDate>Mon, 16 Jul 2018 13:18:00 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/note/elixir-protocols-and-behaviors/</guid>
      <description>Protocols: Describe how an known action is taken on a Type.
Behaviors: Describe how a Type takes an known action.</description>
    </item>
    
    <item>
      <title>Protected Dynamic Client Registration</title>
      <link>https://why.theplatypus.codes/thought/protected-dynamic-client-registration/</link>
      <pubDate>Fri, 30 Mar 2018 15:37:06 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/thought/protected-dynamic-client-registration/</guid>
      <description>Thoughts on Protected Dynamic Client Registration. This proposes a method of trust intended for software statements that can be Endorsed by trusted 3rd parties, and used by an authorization server that has little or no knowledge of the Developer.
This uses the General JWS JSON Serialization Syntax to exchange data and signatures between parties.
Payload MUST contain at least one of kid, jku, jwk to allow identification of the Developer.</description>
    </item>
    
    <item>
      <title>How the Platypus Built an Arch</title>
      <link>https://why.theplatypus.codes/fable/how-the-platypus-built-an-arch/</link>
      <pubDate>Tue, 26 Dec 2017 12:28:00 -0400</pubDate>
      
      <guid>https://why.theplatypus.codes/fable/how-the-platypus-built-an-arch/</guid>
      <description>One evening the platypus was in his workshop tinkering with a new piece of code. As the evening wore on and the code grew the platypus started to think about the code&amp;rsquo;s future. Who would use it? Where would it live? He knew that only he would use the code, it was just a silly personal project after all, but to his dismay he did not know where it could live.</description>
    </item>
    
  </channel>
</rss>